import eventemitter3 as EventEmitter
import ./DataConnectionMock

export PeerMock

mocks = {}

class PeerMock extends EventEmitter

  connections: {}
  disconnected: false
  destroyed: false
  open: false

  init: (id, options, config, debug) ->
    EventEmitter.call(@)
    @id = id
    @options = options
    @config = config
    @debug = debug
    mocks[@id] = @

  connect: (id, options) ->
    connection = new DataConnectionMock(id, @, options)
    connection._configureDataChannel(mocks)
    @_addConnection(id, connection)
    return connection

  disconnect: () ->
    @disconnected = true
    @open = false
    @emit('disconnected', @id)
    @_lastServerId = @id
    @id = null

  destroy: () ->
    @destroyed = true
    @emit('destroyed', @id)
    @disconnect()

  _addConnection: (peer, connection) ->
    if not @connections[peer]
      @connections[peer] = []
    @connections[peer].push(connection)
    @emit('connection', connection)

  _negotiate: (peer, remoteConnection) ->
    localConnection = new DataConnectionMock(peer, @, {})
    localConnection._setRemote(remoteConnection)
    @_addConnection(peer, localConnection)
    return localConnection
